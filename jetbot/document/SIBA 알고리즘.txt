SIBA (Spiral, Intellectual Boustrophedon and A* search) 알고리즘
- On-line Coverage Path Planning 방법.
- S- 동작과 개선된 B 동작이 혼합된 형태.

논문 : http://kiise.or.kr/e_journal/2013/10/sa/pdf/04.pdf


- 전제
시작은 벽에 붙여서 놓여진다고 가정.
S-동작이나 B-동작을 할 때 인전됩 4면의 셀 중 1~3개 면의 셀이 청소되지 않은 셀들은 
Backtracking list에 넣음. 청소가 된 셀들은 backtracking list에서 제외.

청소할 때는 4개의 방향으로만 움직이고 backtracking 할 때는 대각선으로도 움직일 수 있음.
두 지점 사이의 직선거리는 휴리스틱함수로 사용.

인접 셀들이 모두 청소 되었거나 장애물인 상황에 도달하면 A* 탐색 시작.
여기서는 목표 지점이 backtracking list의 모든 셀들임. 그 중 가장 가까운 곳으로 이동.


- 자료구조
벽/장애물, 청소 한 부분인지 아닌지 표시하는 청소상황 매트릭스.
단, S-동작으로 청소된 부분은 구분해서 표시. S-동작으로 청소된 부분은 영역 갯수를 줄이기 위해
IB-동작으로 청소를 한 번 더 해도 될 수 있도록 하기 위함.


- 알고리즘
step 0: 자료구조 초기화. (Layout Map matrix 및 Backtracking list)
	Layout Map matrix의 값 : 벽 or 장애물, S-동작 청소, IB-동작 청소, 청소 안됨

step 1: 처음엔 벽에 붙여서 놓여진다고 가정. 벽을 따라서 S-동작을 통해 전체 영역의 외곽지역
  경계부분을 을 찾아내며 청소함. 진행하며 자료구조 update

<반복 구간>
step 2: IB-동작을 진행하며 자료구조 update, 장애물 또는 막다른 골목인지 검사. 장애물이라면
  그곳에서부터 S-동작으로 장애물의 경계선을 찾아가며 테두리 청소. 경계선을 다 청소하면
  그 자리가 임계점이 되어 다음 IB-동작 영역을 찾음.
  장애물 도는 방향은 로봇의 좌측/우측에 장애물이 접하면 그 방향으로, 전면이면 오른쪽으로.

step 3: 막다른 골목이거나 S-동작을 하고 난 후 그 자리에서 다음 IB-동작영역 시작점을 찾아야함.
  A*알고리즘을 이용해 가장 가까운 backtracking 지점과 그곳으로 가는 경로 찾음.

step 4: 찾은 경로를 따라 로봇을 이동하여 새로운 IB-동작을 진행.


* IB-동작
  B-동작은 상하 운동만 하며 상하 운동 중에 벽이나 장애물 혹은 이미 청소한 곳을 만나면 일단 90도
회전하여 한 칸 진행 후 북쪽이 비어있으면 북쪽으로, 막혀있으면 남쪽으로 진행하는 방식임.
이러한 B-동작은 작은 영역을 많이 만들고 왼쪽부터 차례로 청소하는 목표와 관계없이 진행됨.
개선하여 IB-동작을 설계.  아래는 논문에서 제시하는 IB-동작 순서.

B-동작 중 좌측이 비어있다면 좌측으로 수평 진행. 
또한 북쪽으로 이동해야하지만 남쪽이 비어있다면 남쪽영역을 중복 청소하고 북쪽으로 진행.
상하로 진행하는 도중 S-동작으로 청소된 셀이 있다면 그 옆 열이 비어있어도 S-동작으로 청소된
곳으로 지나감 (옆 열로 가면 옆 열 남쪽에 작은 영역이 추후에 생겨서 비효율적)

<IB 알고리즘>
if (남쪽 and 서쪽이 안막혀있다면)
	서쪽 이동;
else if (북쪽 and 서쪽이 안막혀있다면)
	서쪽 이동;
else if (북쪽 and 남쪽이 안막혀있다면)
	남쪽 이동;
else if (남쪽 방향이 S-동작 청소 영역이면)
	남쪽 이동;
else if (북쪽이 안막혀있으면)
	북쪽 이동;
else if (남쪽이 안막혀있으면)
	남쪽 이동;
else if (동쪽이 안막혀있으면)
	동쪽 이동;
else if (서쪽이 안막혀있으면)
	서쪽 이동;


