로봇청소기 주행 알고리즘

* 타 청소기 알고리즘
mapping 방식 (지그재그형 이동)
- 중복 청소영역을 줄이기때문에 효율적, 그러나 한번 지나간곳은 다시 하지않음.

ssw 방식(주변 지물 및 공간 크기 먼저 파악 후 1.구석, 2.자유, 3. 원형 순서)
- 구석구석 청소가능

출처 : https://m.cafe.daum.net/mamicleaner/G9dE/972?q=D_null&

* simple cleaning robot algorithm.
1. Initialize the observed map to empty, current position to (0, 0)
   (현재 위치를 (0,0) 으로 하고 지도 초기화)
2. Find the nearest unvisited point in observed map using Breadth-First Search
   (너비우선탐색법을 사용해 가장 가까이 있는 방문하지 않은 지점 찾기) 
3. If cannot find, algorithm stops, and the accessible part of the room has been cleaned. Otherwise go to step 4
   (만약 못찾으면 접근 가능한 부분을 다 했기때문에 알고리즘 멈추고  4단계로 이동)
4. Move the robot to the position found in step 2, with each step updating the current position.
   (2단계에서 찾은 위치로 로봇 이동, 각 단계에서 현 위치 업데이트)
5. If it cannot move to the desired position, mark the position as obstructed in observed map, otherwise mark it as visited.
   (위치로 이동하지 못하면 맵에 이동할수 없는 곳이라 표기하고 이동하면 방문한곳으로 표기)
6. Go back to step 2
   (2단계로 이동)

출처 : https://github.com/dungba88/cleaner_robot

* 청소로봇 주행 알고리즘 (Coverage Path Planning, 모든 영역 지나는 경로 계획법)
- 임의 경로 진행법(Heuristic and Random Approaches)
단순히 방향을 임의로 설정하고 미리 정해진 규칙에 따라 진행 방향을 재설정
(장애물 / 벽에 부딪힐때, 특정기준을 만날 때 행동 세트를 갖도록 함)

- 오프라인 경로계획법 (Off-line Coverage Path Planning)
주어진 지도를 분석해서 진행할 커버리지 경로를 미리 생성하는 방법.
(먼저 영역을 구분하고 전체 커버 순서를 정한 다음, 각각의 작은 영역의 경로를 생성)
(셀(Cell) 분할을 이용하여, 주어진 작은영역을 여러 개의 작은 셀로 나누어 각 셀 영역을 로봇의
간단한 동작으로 커버, 장애물의 변화에 따라 셀과 셀 사이의 경로 계획, 이동 불가능한 영역을
표시하고 전체 영역을 이동 가능한 셀과 불가능한 셀로 나눈다.)
(안정된 영역 구분을 수행하면서도 복잡성을 감소시키는 영역 구분 방법이 관건)

- 모스 함수를 이용한 방법(Morse Function)
임계점(critical point) 사이의 기하학적 특성을 통해 완벽한 커버리지를 보장.

- 온라인 경로계획법 (On-line Coverage Path Planning)
미리 지도를 알지 못하는 상태에서 센서 정보를 분석해 커버리지 경로를 생성하는 방법.
(지도의 기하학적 구조를 바탕으로 영역 구분, 이를 분석해 커버리지 수행)

* SIBA (Spiral, Intellectual Boustrophedon and A* search) 알고리즘
S- 동작과 개선된 B 동작이 혼합된 형태.





* 주행할 때 알 수 있는 현재 사항들
(Lidar , IMU 센서)
- 주변 반경 거리 데이터


* 공통 주행 주의사항
- tracking모드 또는 수동 모드로 전환시 기존 청소하던 영역 기억 및 모드 종료 후 청소모드 시 동작


* SIBA 알고리즘을 통해 한다면 고려해야할 사항
- cell matrix 생성 (grid 1 cell의 크기, STL 또는 2d array 사용 등)
- backtracking list 생성 (어떤 자료구조 쓸지)
- A* 알고리즘을 통한 최단경로 계산부분 구현 (S-동작 및 IB-동작은 논문에 기재되어있음)
 