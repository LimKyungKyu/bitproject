C++에서 OpenCV를 활용한 YOLOv3
참고 사이트 : https://www.learnopencv.com/deep-learning-based-object-detection-using-yolov3-with-opencv-python-c/

- darknet이라는 open source를 통해 YOLO 알고리즘을 사용, prediction을 할 수 있었고,
  우리 상황에 맞는 데이터를 기반으로 training도 시킬 수 있음. 그 결과 학습된 가중치가 저장된
  .weight 파일을 얻을 수 있었고, YOLO network layer는 .cfg 파일을 통해 설정 할 수 있다.
  
  위 파일들을 기반으로 OpenCV를 활용한 C++ 환경에서 prediction을 해 보겠다.
  
소스 코드 : https://github.com/spmallick/learnopencv/tree/master/ObjectDetection-YOLO

object_detection_yolo.cpp 파일 복사, 사용할 YOLO weight 파일과 cfg 파일, names 파일을 같은 경로에 복사.
(weight 파일-> 이미 학습된 가중치가 저장된 파일, cfg 파일-> YOLO network 구성이 정의된 파일, 
  names 파일-> 분류를 위한 class가 정의된 파일.)
(weight, cfg, names 파일이 없다면 위 소스코드 주소 내 getModels.sh 스크립트를 참고하여 다운)

g++ object_detection_yolo.cpp -o object_detection_yolo `pkg-config --cflags --libs opencv4`
명령어로 컴파일 및 실행.

cpu로 사용해서 그런지 image 1장당 3.3초 정도가 걸렸음. 
-> gpu 사용을 위해서는 openCV에서 CUDA 사용 해야함.

기존 태빈이형 install 문서에는 OpenCV 설치 시 cmake 옵션에 CUDA 사용 지정을 하지 않아서 추가 해줘야함.

자신의 OpenCV build 디렉터리로 이동.

(제 환경은 아래의 경로)
$ cd ~/src/opencv/opencv-4.1.1/build

$ make clean

cmake 시 CUDA옵션 추가해야함.(아래 4개 옵션이 CUDA 옵션)
$ cmake -D CMAKE_BUILD_TYPE=RELEASE \
-D CMAKE_INSTALL_PREFIX=/usr/local \
-D WITH_TBB=OFF \
-D WITH_IPP=OFF \
-D WITH_1394=OFF \
-D BUILD_WITH_DEBUG_INFO=OFF \
-D BUILD_DOCS=OFF \
-D INSTALL_C_EXAMPLES=ON \
-D INSTALL_PYTHON_EXAMPLES=ON \
-D BUILD_EXAMPLES=OFF \
-D BUILD_TESTS=OFF \
-D BUILD_PERF_TESTS=OFF \
-D WITH_QT=OFF \
-D WITH_GTK=ON \
-D WITH_OPENGL=ON \
-D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib/modules \
-D WITH_V4L=ON  \
-D WITH_FFMPEG=ON \
-D WITH_XINE=ON \
-D BUILD_NEW_PYTHON_SUPPORT=ON \
-D OPENCV_GENERATE_PKGCONFIG=ON 
-D WITH_CUDA=ON \
-D ENABLE_FAST_MATH=1 \
-D CUDA_FAST_MATH=1 \
-D WITH_CUBLAS=1 \
../

빌드 (메모리때매 alt + f3(환경마다 키 다름)로 xwindow 끄고 cli에서 진행)
$ time make -j4
$ sudo make install
$ sudo ldconfig

위까지 진행하면 /usr/local/include/opencv4/opencv2 경로에 cuda 관련 헤더파일들이 생겼을거임.

OpenCV에선 CUDA 지원에 있어 기존 문법과 차이점을 크게 두지 않기 위해 GPU용 클래스를 따로 제공함.
기존 OpenCV 작성과 동일하나 클래스만 GPU용을 사용하면 되는 듯 함
ex) cv::Mat 대신 cv::cuda::GpuMat, 기존 Mat 클래스를 GpuMat으로 변경할때 GpuMat.upload(Mat)


